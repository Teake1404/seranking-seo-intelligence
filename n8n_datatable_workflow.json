{
  "name": "SEO Analysis - Data Tables Version",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [{"field": "cronExpression", "value": "0 9 * * 1-5"}]
        }
      },
      "id": "schedule",
      "name": "Daily 9 AM Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1,
      "position": [250, 400]
    },
    {
      "parameters": {
        "operation": "search",
        "dataTableId": "SEO_Rankings",
        "limit": 1000,
        "sort": {
          "fields": [
            {
              "fieldName": "date",
              "direction": "DESC"
            }
          ]
        },
        "filters": {
          "conditions": [
            {
              "fieldName": "date",
              "operator": "afterDate",
              "value": "={{ $now.minus({days: 30}).toISO() }}"
            }
          ]
        }
      },
      "id": "get-history",
      "name": "Get 30-Day History from Data Table",
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [470, 400]
    },
    {
      "parameters": {
        "url": "https://seranking-seo-api-671647576749.us-central1.run.app/api/generate-report",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"domain\": \"bagsoflove.co.uk\",\n  \"keywords\": [\"custom t shirts\", \"custom gifts\", \"photo gifts\", \"photo blanket\"],\n  \"keyword_priorities\": {\n    \"custom t shirts\": \"high\",\n    \"custom gifts\": \"high\",\n    \"photo gifts\": \"medium\",\n    \"photo blanket\": \"low\"\n  },\n  \"competitors\": [\"notonthehighstreet.com\", \"moonpig.com\", \"gettingpersonal.co.uk\"],\n  \"check_frequency\": \"daily\",\n  \"historical_data\": {{ $json }}\n}",
        "options": {"timeout": 600000}
      },
      "id": "call-api",
      "name": "Call Cloud Run API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [690, 400]
    },
    {
      "parameters": {
        "jsCode": "// Use enriched rankings data (already includes all fields)\nconst response = $input.first().json;\nconst enrichedRankings = response.data.enriched_rankings;\n\n// Return enriched data ready for Data Table\nreturn enrichedRankings.map(record => ({json: record}));"
      },
      "id": "prepare-data",
      "name": "Prepare Data for Storage",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [910, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "dataTableId": "SEO_Rankings",
        "fieldsToSend": "defineBelow",
        "fields": {
          "mappings": [
            {"fieldName": "keyword", "fieldValue": "={{ $json.keyword }}"},
            {"fieldName": "domain", "fieldValue": "={{ $json.domain }}"},
            {"fieldName": "position", "fieldValue": "={{ $json.position }}"},
            {"fieldName": "previous_position", "fieldValue": "={{ $json.previous_position }}"},
            {"fieldName": "url", "fieldValue": "={{ $json.url }}"},
            {"fieldName": "title", "fieldValue": "={{ $json.title }}"},
            {"fieldName": "date", "fieldValue": "={{ $json.date }}"},
            {"fieldName": "timestamp", "fieldValue": "={{ $json.timestamp }}"},
            {"fieldName": "keyword_priority", "fieldValue": "={{ $json.keyword_priority }}"},
            {"fieldName": "search_volume", "fieldValue": "={{ $json.search_volume }}"},
            {"fieldName": "cpc", "fieldValue": "={{ $json.cpc }}"},
            {"fieldName": "difficulty", "fieldValue": "={{ $json.difficulty }}"},
            {"fieldName": "in_top10", "fieldValue": "={{ $json.in_top10 }}"}
          ]
        }
      },
      "id": "store-rankings",
      "name": "Store in Data Table",
      "type": "n8n-nodes-base.dataTable",
      "typeVersion": 1,
      "position": [1130, 300]
    },
    {
      "parameters": {
        "jsCode": "// Format report for Slack\nconst report = $input.first().json.report;\nconst summary = $input.first().json.summary;\nconst anomalies = $input.first().json.anomalies || [];\nconst top10 = $input.first().json.top10_changes || {};\n\n// Create rich Slack message\nconst blocks = [\n  {\n    \"type\": \"header\",\n    \"text\": {\"type\": \"plain_text\", \"text\": \"📊 SEO Daily Brief\"}\n  },\n  {\n    \"type\": \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\": `*Performance Summary:*\\n• ${summary.page_1_keywords}/${summary.keywords_tracked} keywords on page 1\\n• Visibility: ${summary.visibility_score}\\n• Anomalies: ${summary.anomalies_count}\\n• Competitors tracked: ${summary.competitors_tracked}`\n    }\n  }\n];\n\nif (top10.new_entries && top10.new_entries.length > 0) {\n  let top10Text = '*🔥 Top 10 Changes:*\\n';\n  top10.new_entries.forEach(e => {\n    top10Text += `✅ ${e.keyword}: entered Top 10 at #${e.current_position}\\n`;\n  });\n  top10.exits.forEach(e => {\n    top10Text += `❌ ${e.keyword}: dropped from #${e.previous_position} to #${e.current_position}\\n`;\n  });\n  blocks.push({\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": top10Text}});\n}\n\nif (anomalies.length > 0) {\n  let anomalyText = '*🚨 Statistical Anomalies:*\\n';\n  anomalies.slice(0, 3).forEach(a => {\n    const emoji = a.type === 'improvement' ? '📈' : '📉';\n    anomalyText += `${emoji} ${a.keyword}: #${a.current_position} (${a.z_score}σ deviation)\\n`;\n  });\n  blocks.push({\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": anomalyText}});\n}\n\nblocks.push({\n  \"type\": \"section\",\n  \"text\": {\"type\": \"mrkdwn\", \"text\": `\\`\\`\\`${report.substring(0, 2000)}\\`\\`\\``}\n});\n\nreturn [{json: {blocks: blocks, text: report}}];"
      },
      "id": "format-slack",
      "name": "Format for Slack",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [910, 500]
    },
    {
      "parameters": {
        "url": "={{ $env.SLACK_WEBHOOK_URL }}",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "id": "send-slack",
      "name": "Send to Slack",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1130, 500]
    }
  ],
  "connections": {
    "schedule": {"main": [[{"node": "get-history", "type": "main", "index": 0}]]},
    "get-history": {"main": [[{"node": "call-api", "type": "main", "index": 0}]]},
    "call-api": {"main": [[
      {"node": "prepare-data", "type": "main", "index": 0},
      {"node": "format-slack", "type": "main", "index": 0}
    ]]},
    "prepare-data": {"main": [[{"node": "store-rankings", "type": "main", "index": 0}]]},
    "format-slack": {"main": [[{"node": "send-slack", "type": "main", "index": 0}]]}
  },
  "settings": {"executionOrder": "v1"}
}

